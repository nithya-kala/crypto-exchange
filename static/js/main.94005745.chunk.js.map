{"version":3,"sources":["CurrencyPicker.tsx","Exchange.tsx","ExchangeTable.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["useStyles","createStyles","theme","opened","control","width","display","justifyContent","alignItems","padding","borderRadius","radius","sm","border","colors","gray","transition","backgroundColor","white","label","fontWeight","fontSize","fontSizes","icon","transform","CurrencyPicker","props","useState","setOpened","classes","items","options","map","item","Menu","Item","image","onClick","onChange","transitionDuration","onOpen","onClose","UnstyledButton","className","Group","spacing","selected","size","currencyOpts","cryptoOpts","Exchange","currFrom","setCurrFrom","amount1","setAmount1","currTo","setCurrTo","amount2","setAmount2","Card","shadow","p","style","marginBottom","Section","Center","Grid","align","Col","xs","TextInput","type","placeholder","value","e","parseInt","target","alignSelf","Button","color","order","from","currency","amount","to","orderDate","Date","toISOString","onAddOrder","save","ExchangeTable","rows","orders","row","index","JSON","stringify","ordDate","onDtChange","Table","horizontalSpacing","process","HOST_ENV","axios","defaults","baseURL","wrapper","paddingTop","xl","paddingBottom","title","fontFamily","md","textAlign","fn","smallerThan","description","App","setOrders","fetchOrders","get","params","then","res","data","useEffect","setInterval","console","log","Container","pt","pb","Title","Text","post","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.94005745.chunk.js","sourcesContent":["import { createStyles, Group, Menu, UnstyledButton } from '@mantine/core'\nimport { useLocalStorage } from '@mantine/hooks'\nimport React, { useState } from 'react'\nimport { ChevronDown } from 'tabler-icons-react'\n\nexport type CxOption = {\n  label: string\n  image: React.ReactElement\n}\n\nconst useStyles = createStyles((theme, { opened }: { opened: boolean }) => ({\n  control: {\n    width: 200,\n    display: 'flex',\n    justifyContent: 'space-between',\n    alignItems: 'center',\n    padding: '5px 15px',\n    borderRadius: theme.radius.sm,\n    border: `1px solid ${theme.colors.gray[4]}`,\n    transition: 'background-color 150ms ease',\n    backgroundColor: opened ? theme.colors.gray[0] : theme.white,\n\n    '&:hover': {\n      backgroundColor: theme.colors.gray[0],\n    },\n  },\n\n  label: {\n    fontWeight: 500,\n    fontSize: theme.fontSizes.sm,\n  },\n\n  icon: {\n    transition: 'transform 150ms ease',\n    transform: opened ? 'rotate(180deg)' : 'rotate(0deg)',\n  },\n}))\n\ntype CurrencyPickerProps = {\n  options: CxOption[]\n  selected: CxOption\n  onChange: (v: CxOption) => void\n}\n\nexport const CurrencyPicker: React.FC<CurrencyPickerProps> = (props) => {\n  const [opened, setOpened] = useState(false)\n  const { classes } = useStyles({ opened })\n\n  const items = props.options.map((item) => (\n    <Menu.Item\n      icon={item.image}\n      onClick={() => props.onChange(item)}\n      key={item.label}\n    >\n      {item.label}\n    </Menu.Item>\n  ))\n\n  return (\n    <Menu\n      transitionDuration={0}\n      onOpen={() => setOpened(true)}\n      onClose={() => setOpened(false)}\n      radius=\"sm\"\n      control={\n        <UnstyledButton className={classes.control}>\n          <Group spacing=\"xs\">\n            {props.selected.image}\n            <span className={classes.label}>{props.selected.label}</span>\n          </Group>\n          <ChevronDown size={16} className={classes.icon} />\n        </UnstyledButton>\n      }\n    >\n      {items}\n    </Menu>\n  )\n}\n","import { Button, Card, Center, Container, Grid, TextInput } from '@mantine/core'\nimport { useLocalStorage } from '@mantine/hooks'\nimport React, { useState } from 'react'\nimport axios from 'axios'\nimport {\n  CurrencyBitcoin,\n  CurrencyDollar,\n  CurrencyDollarCanadian,\n  CurrencyDollarSingapore,\n  CurrencyEthereum,\n  CurrencyEuro,\n  CurrencyLitecoin,\n  CurrencyPound,\n  CurrencyRipple,\n  CurrencyRupee,\n  CurrencyYen,\n  CurrencyFrank,\n} from 'tabler-icons-react'\nimport { CurrencyPicker, CxOption } from './CurrencyPicker'\nimport { OrderType } from './types'\n\nconst currencyOpts: CxOption[] = [\n  { label: 'USD', image: <CurrencyDollar /> },\n  { label: 'EUR', image: <CurrencyEuro /> },\n  { label: 'GBP', image: <CurrencyPound /> },\n  { label: 'SGD', image: <CurrencyDollarSingapore /> },\n  { label: 'CAD', image: <CurrencyDollarCanadian /> },\n  { label: 'YEN', image: <CurrencyYen /> },\n  { label: 'INR', image: <CurrencyRupee /> },\n  { label: 'MYR', image: <CurrencyFrank /> },\n]\n\nconst cryptoOpts: CxOption[] = [\n  { label: 'Bitcoin', image: <CurrencyBitcoin /> },\n  { label: 'Ethereum', image: <CurrencyEthereum /> },\n  { label: 'Ripple', image: <CurrencyRipple /> },\n  { label: 'Litecoin', image: <CurrencyLitecoin /> },\n]\n\ntype MyProps = {\n  onAddOrder(order: OrderType): void\n}\n\nconst Exchange: React.FC<MyProps> = (props) => {\n  const [currFrom, setCurrFrom] = useState(cryptoOpts[0])\n  const [amount1, setAmount1] = useState(10)\n  const [currTo, setCurrTo] = useState(currencyOpts[0])\n  const [amount2, setAmount2] = useState(20)\n\n  const save = () => {\n    const order: OrderType = {\n      from: { currency: currFrom.label, amount: amount1 },\n      to: { currency: currTo.label, amount: amount2 },\n      orderDate: new Date().toISOString(),\n    }\n\n    props.onAddOrder(order)\n  }\n\n  return (\n    <Card shadow=\"xs\" p=\"lg\" style={{ marginBottom: 10 }}>\n      <Card.Section p=\"lg\">\n        <Center>\n          <h2>Exchange</h2>\n        </Center>\n\n        <Grid align=\"flex-end\">\n          <Grid.Col xs={3}>\n            <label>Currency from </label>\n            <CurrencyPicker\n              options={cryptoOpts}\n              selected={currFrom}\n              onChange={setCurrFrom}\n            />\n          </Grid.Col>\n          <Grid.Col xs={2}>\n            <label>Amount </label>\n            <TextInput\n              type=\"number\"\n              placeholder=\"amount\"\n              value={amount1}\n              onChange={(e) => setAmount1(parseInt(e.target.value))}\n            />\n          </Grid.Col>\n          <Grid.Col xs={1} style={{ alignSelf: 'center' }}>\n            <label className=\"equals\">=</label>\n          </Grid.Col>\n          <Grid.Col xs={3}>\n            <label>Currency to </label>\n            <CurrencyPicker\n              options={currencyOpts}\n              selected={currTo}\n              onChange={setCurrTo}\n            />\n          </Grid.Col>\n          <Grid.Col xs={2}>\n            <label>Amount </label>\n            <TextInput\n              type=\"number\"\n              placeholder=\"amount\"\n              value={amount2}\n              onChange={(e) => setAmount2(parseInt(e.target.value))}\n            />\n          </Grid.Col>\n          <Grid.Col xs={1}>\n            <Button color=\"green\" onClick={() => save()}>\n              Save\n            </Button>\n          </Grid.Col>\n        </Grid>\n      </Card.Section>\n    </Card>\n  )\n}\n\nexport { Exchange }\n","import { Card, Grid, Table } from '@mantine/core'\nimport { OrderType } from './types'\nimport { DatePicker } from '@mantine/dates'\nimport { Calendar } from 'tabler-icons-react'\n\ntype MyProps = {\n  orders: OrderType[]\n  ordDate: Date | null\n  onDtChange(dt: Date | null): void\n}\n\nexport const ExchangeTable: React.FC<MyProps> = (props) => {\n  const rows = props.orders.map((row, index) => (\n    <tr key={JSON.stringify(row)}>\n      <td>{index + 1}</td>\n      <td>{row.from.currency}</td>\n      <td>{row.from.amount}</td>\n      <td>{row.to.currency}</td>\n      <td>{row.to.amount}</td>\n      <td>{row.orderDate}</td>\n    </tr>\n  ))\n\n  return (\n    <Card shadow=\"xs\" p=\"lg\">\n      <Card.Section p=\"lg\">\n        <Grid align=\"flex-end\">\n          <Grid.Col xs={3}>\n            <DatePicker\n              transitionDuration={0}\n              placeholder=\"Pick date\"\n              label=\"Event date\"\n              icon={<Calendar size={16} />}\n              value={props.ordDate}\n              onChange={props.onDtChange}\n            />\n          </Grid.Col>\n        </Grid>\n        <Table horizontalSpacing=\"lg\">\n          <thead>\n            <tr>\n              <th>#</th>\n              <th>Currency From</th>\n              <th>Amount</th>\n              <th>Currency To</th>\n              <th>Amount</th>\n              <th>Date</th>\n            </tr>\n          </thead>\n          <tbody>{rows}</tbody>\n        </Table>\n      </Card.Section>\n    </Card>\n  )\n}\n","import React, { useEffect, useState } from 'react'\nimport axios from 'axios'\n\nimport { Exchange } from './Exchange'\nimport { ExchangeTable } from './ExchangeTable'\nimport { OrderType } from './types'\nimport { Container, createStyles, Text, Title } from '@mantine/core'\n\nif (process.env.HOST_ENV === 'ghpages') {\n  axios.defaults.baseURL = 'https://api.nithis.in'\n}\n\nconst useStyles = createStyles((theme) => ({\n  wrapper: {\n    paddingTop: theme.spacing.xl * 4,\n    paddingBottom: theme.spacing.xl * 4,\n  },\n\n  title: {\n    fontFamily: `Greycliff CF, ${theme.fontFamily}`,\n    fontWeight: 900,\n    marginBottom: theme.spacing.md,\n    textAlign: 'center',\n\n    [theme.fn.smallerThan('sm')]: {\n      fontSize: 28,\n      textAlign: 'left',\n    },\n  },\n\n  description: {\n    textAlign: 'center',\n\n    [theme.fn.smallerThan('sm')]: {\n      textAlign: 'left',\n    },\n  },\n}))\n\nfunction App() {\n  const { classes } = useStyles()\n  const [orders, setOrders] = useState<OrderType[]>([])\n  const [ordDate, onDtChange] = useState<Date | null>(null)\n\n  const fetchOrders = () =>\n    axios\n      .get('/api/get-orders', { params: { ordDate: ordDate } })\n      .then((res) => setOrders(res.data))\n\n  const onAddOrder = (order: OrderType) => {\n    axios.post(`/api/insert-order`, order).then((res) => {\n      return fetchOrders()\n    })\n  }\n\n  useEffect(() => {\n    fetchOrders()\n  }, [ordDate])\n\n  setInterval(() => console.log('Entered Live Data'), 60 * 1000)\n\n  return (\n    <Container size=\"md\" pt={10} pb={10} className={classes.wrapper}>\n      <Title className={classes.title}>Crypto Exchange App</Title>\n\n      <Container size={560} p={0}>\n        <Text size=\"sm\" className={classes.description}>\n          Every once in a while, you’ll see a Golbat that’s missing some fangs.\n          This happens when hunger drives it to try biting a Steel-type Pokémon.\n        </Text>\n      </Container>\n\n      <Exchange onAddOrder={onAddOrder} />\n      <ExchangeTable\n        orders={orders}\n        ordDate={ordDate}\n        onDtChange={onDtChange}\n      />\n    </Container>\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(\n  document.getElementById('root') as HTMLElement\n);\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}